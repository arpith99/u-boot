# SPDX-License-Identifier: GPL-2.0+
# Copyright 2022-2023 NXP

if NXP_S32CC

config DEFAULT_DEVICE_TREE
	default "s32cc"

config BUILD_TARGET
	default "u-boot-s32.cfgout"

config SYS_TEXT_BASE
	default 0xffaa0000

config SYS_LOAD_ADDR
	default 0x80000000

config SYS_DATA_BASE
	hex "Data Base"
	default 0xffa00000
	help
	  U-Boot data base address in DDR.

config S32CC_MAX_DTB_SIZE
	hex "Max size reserved for device tree in image layout"
	default 0x8000

config SYS_MALLOC_F_LEN
	default 0x8000

config S32CC_HWCONFIG
	string "S32CC HWConfig definition"
	default "pcie0:mode=rc,clock=ext;pcie1:mode=ep,clock=int"
	help
	  The configuration for the PCIe controllers, stored in
	  the variable 'hwconfig'
	  It configures the mode (rc, ep, sgmii) or the clock type
	  (internal or external)
	  It is also possible to configure combo mode either ep&sgmii or
	  rc&sgmii, with these configurations lane0 is PCIe and lane1
	  is connected to mac depending on 'xpcs_mode'.
	  SGMII uses additional configurations 'fmhz' and 'xpcs_mode'.
	  Config 'xpcs_mode' is used to specifically configure each line in
	  SGMII mode. The following are valid options: '2G5', 'both', '0' and
	  '1'. Mode '2G5' uses lane0 in 2.5G mode and leaves lane1 disabled.
	  Mode 'both' configures both lanes for 1G operation so 2 macs can
	  be connected. Mode '0' is used to configure only XPCS0, this can be
	  used in 'sgmii' mode (one lane emac 1G other lane disabled) or
	  in 'rc&sgmii'/'ep&sgmii' (one lane PCIeX1 other lane SGMII 1G).
	  Same configuration is used for '1', which corresponds to XPCS1.
	  Config 'fmhz' specifies frequency used as reference. In case of
	  2.5G mode it is required to set this 125, if used in SGMII/PCIe
	  combo mode 'fmhz' has to be 100 (PCIe ignores this and always
	  uses 100). In case the SerDes is configured as SGMII and not in
	  2.5G mode either 100 or 125 can be used in 'fmhz'.
	  Available 'xpcs_mode' are depedent on platform:
	      s32g274a - supports '0','1','both' and '2G5'
	      s32r45   - supports '0' and '2G5'

config S32CC_CONFIG_FILE
	string
	default "arch/arm/mach-s32/s32-cc/s32cc.cfg"

config TARGET_TYPE_S32CC_EMULATOR
	bool
	default n

config LMB_MAX_REGIONS
	default 16

if TARGET_TYPE_S32CC_EMULATOR
config BAUDRATE
	default 7812500
endif

config ENV_OFFSET
	default 0x1e0000

config SF_DEFAULT_BUS
	default 6

config SF_DEFAULT_CS
	default 0

if SD_BOOT
config ENV_IS_IN_MMC
	default y

config ENV_SIZE
	default 0x2000
endif

if QSPI_BOOT
config ENV_IS_IN_SPI_FLASH
	default y

config ENV_SIZE
	default 0x10000

config ERR051257_WORKAROUND
	bool "ERR051257 erratum workaround"
	default y
	help
	  Enable workaround for ERR051257 erratum.
	  The QSPI boot flow will hang if the QSPI memory will rise any ECC
	  error interrupt. As a software solution for this issue, the pins
	  QSPI_INTA_b and QSPI_INTB_b are configured as GPIO from DCD and the
	  images(QSPI parameters for BootROM, DCD, HSE FW, etc) have an unused
	  space of 1K between them.
endif

endif

source "arch/arm/mach-s32/s32g2/Kconfig"
source "arch/arm/mach-s32/s32g3/Kconfig"
source "arch/arm/mach-s32/s32r45/Kconfig"
source "board/nxp/s32-cc/Kconfig"
